name: Build and Release Smaller Tailscale

on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:
  push:
   paths:
      - .github/workflows/build_small_tailscale.yml

jobs:
  check-and-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # Linux
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: linux
            goarch: "386"
          - goos: linux
            goarch: loong64
          - goos: linux
            goarch: arm
            goarm: "5"
          - goos: linux
            goarch: arm
            goarm: "7"
          # macOS
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
          # Windows
          - goos: windows
            goarch: amd64
          - goos: windows
            goarch: arm64
          # BSDs
          - goos: freebsd
            goarch: amd64
          - goos: openbsd
            goarch: amd64

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get latest non-pre Tailscale tag
        id: get_tag
        run: |
          git clone https://github.com/tailscale/tailscale.git
          cd tailscale
          LATEST_TAG=$(git tag -l --sort=-v:refname | grep -v -E '(pre|rc)' | head -n 1)
          echo "::set-output name=latest_tag::$LATEST_TAG"

      - name: Check if tag already built
        id: check_tag
        run: |
          if git rev-parse ${{ steps.get_tag.outputs.latest_tag }} >/dev/null 2>&1; then
            echo "::set-output name=tag_exists::true"
          else
            echo "::set-output name=tag_exists::false"
          fi

      - name: Set Version Variables
        run: |
          cd tailscale
          VERSION_SHORT=$(git describe --tags --abbrev=0)
          VERSION_GIT_HASH=$(git rev-parse --short HEAD)
          VERSION_LONG="${VERSION_SHORT}-t${VERSION_GIT_HASH}"
          echo "VERSION_SHORT=${VERSION_SHORT}"
          echo "VERSION_GIT_HASH=${VERSION_GIT_HASH}"
          echo "VERSION_LONG=${VERSION_LONG}"

      - name: Set up Go
        if: steps.check_tag.outputs.tag_exists == 'false'
        uses: actions/setup-go@v2
        with:
          go-version: '^1.17'

      - name: Build smaller Tailscale binary
        if: steps.check_tag.outputs.tag_exists == 'false'
        run: |
          set -eux  # Add debugging information
          cd tailscale
          git checkout ${{ steps.get_tag.outputs.latest_tag }}
          eval $(CGO_ENABLED=0 GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go run ./cmd/mkversion)
          ./build_dist.sh --extra-small ./cmd/tailscaled
          cp tailscaled ../tailscale.combined

      - name: Create non-compressed binary
        if: steps.check_tag.outputs.tag_exists == 'false'
        run: |
          cp tailscale.combined tailscale-small-${{ matrix.goos }}-${{ matrix.goarch }}-${{ steps.get_tag.outputs.latest_tag }}

      - name: Install UPX
        if: steps.check_tag.outputs.tag_exists == 'false'
        run: sudo apt-get update && sudo apt-get install -y upx

      - name: Compress with UPX
        if: steps.check_tag.outputs.tag_exists == 'false'
        run: |
          upx --lzma --best ./tailscale.combined
          mv tailscale.combined tailscale-small-upx-${{ matrix.goos }}-${{ matrix.goarch }}-${{ steps.get_tag.outputs.latest_tag }}

  release:
    needs: check-and-build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create Release
        if: needs.check-and-build.outputs.tag_exists == 'false'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.check-and-build.outputs.latest_tag }}
          release_name: Tailscale ${{ needs.check-and-build.outputs.latest_tag }}
          body: |
            This release contains two versions of the Tailscale binary for each platform:
            - Non-compressed version
            - UPX-compressed version

            The UPX-compressed version is smaller but may trigger false positives in some security software.
          draft: false
          prerelease: false

      - name: Upload Non-Compressed Binaries
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./tailscale-small-*
          asset_name: tailscale-small-${{ matrix.goos }}-${{ matrix.goarch }}-${{ needs.check-and-build.outputs.latest_tag }}
          asset_content_type: application/octet-stream

      - name: Upload UPX-Compressed Binaries
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./tailscale-small-upx-*
          asset_name: tailscale-small-upx-${{ matrix.goos }}-${{ matrix.goarch }}-${{ needs.check-and-build.outputs.latest_tag }}
          asset_content_type: application/octet-stream

